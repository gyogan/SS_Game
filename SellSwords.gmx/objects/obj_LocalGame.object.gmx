<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
state = "map_init";

globalvar map; //I'm the map!

mapWidth = room_width/GRID_SIZE;
mapHeight = room_height/GRID_SIZE;


//Create Nodes
for(xx = 0; xx &lt; mapWidth; xx++){
    for(yy = 0; yy &lt; mapHeight; yy++){
       map[xx,yy] = instance_create(xx * GRID_SIZE, yy * GRID_SIZE, obj_oNode);
    }
}

//Populate Neighbors
for(xx = 0; xx &lt; mapWidth; xx++){
    for(yy = 0; yy &lt; mapHeight; yy++){
    
        node = map[xx, yy];
        
        if(xx &gt; 0){              ds_list_add(node.neighbors, map[xx - 1, yy]); }//Adds Left
        if(xx &lt; mapWidth - 1){   ds_list_add(node.neighbors, map[xx + 1, yy]); }//Adds Right   
        if(yy &gt; 0){              ds_list_add(node.neighbors, map[xx, yy - 1]); }//Adds Top
        if(yy &lt; mapHeight - 1){  ds_list_add(node.neighbors, map[xx, yy + 1]); }//Adds Bottom
        
        if(xx &gt; 0 &amp;&amp; yy &gt; 0){                           ds_list_add(node.neighbors, map[xx - 1, yy - 1]); } //Adds Top-Left
        if(xx &gt; 0 &amp;&amp; yy &lt; mapHeight - 1){               ds_list_add(node.neighbors, map[xx - 1, yy + 1]); } //Adds Bottom-Left
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &gt; 0){                ds_list_add(node.neighbors, map[xx + 1, yy - 1]); } //Adds Top-Right
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &lt; mapHeight - 1){    ds_list_add(node.neighbors, map[xx + 1, yy + 1]); } //Adds Bottom-Right
    }
}

//Make Cursor
instance_create(x, y, obj_Cursor);

//Make 2 default units
with(instance_create(5 * GRID_SIZE, 5 * GRID_SIZE, obj_defaultUnit)){
    gridX = 5;
    gridY = 5;
    name = "Spencer";
    map[gridX, gridY].occupant = id;
}

with(instance_create(5 * GRID_SIZE, 8 * GRID_SIZE, obj_defaultUnit)){
    gridX = 5;
    gridY = 8;
    name = "Zach";
    map[gridX, gridY].occupant = id;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch(state){

    case "map_init":

    with(obj_oNode){
        //Finds what terrain is on the node, then adopts its qualities
        if(instance_position(x + 16, y + 16, par_Terrain)){
            tempTerrain = instance_position(x + 16, y + 16, par_Terrain);
            switch(tempTerrain.type){
                case "Wall":
                    type = "Wall";
                    sprite_index = "spr_Wall";
                    passable = false;
                break;
            
                case "Rubble":
                    type = "Rubble";
                    sprite_index = "spr_Rubble";
                    passable = true;
                    cost = 2;
                    break; 
            }
            with(tempTerrain){ instance_destroy(); }
        }
    }
    state = "ready";
    break;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
