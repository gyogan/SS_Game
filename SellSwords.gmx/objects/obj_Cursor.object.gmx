<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initializes Hover

gridX = 0;
gridY = 0;

hoverNode = noone;

selectedUnit = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles cursor movement and unit selection

x = mouse_x;    //Moves object to cursor
y = mouse_y;

gridX = floor(x / GRID_SIZE);
gridY = floor(y / GRID_SIZE);

if(gridX &lt; 0 || gridY &lt; 0 || gridX &gt;= room_width / GRID_SIZE || gridY &gt;= room_height / GRID_SIZE){
    hoverNode = noone;
}
else{
    hoverNode = map[gridX, gridY];
}

if(mouse_check_button_pressed(mb_left)){
    
    if(hoverNode.occupant != noone){
        selectedUnit = hoverNode.occupant;
    }
    else{ 
        selectedUnit = noone; 
    }  
}

if(mouse_check_button_pressed(mb_right)){
    if(selectedUnit != noone &amp;&amp; hoverNode.occupant == noone &amp;&amp; hoverNode.passable){
        //Clear node of selected actor
        map[selectedUnit.gridX, selectedUnit.gridY].occupant = noone;
        
        //Update selectedUnit's position info
        selectedUnit.gridX = gridX;
        selectedUnit.gridY = gridY;
        selectedUnit.x = hoverNode.x;
        selectedUnit.y = hoverNode.y;
        
        //Update new node's occupant stastus
        hoverNode.occupant = selectedUnit;
        
        //Unselect the unit
        selectedUnit = noone;
    }
    else{ 
        selectedUnit = noone;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws debug info
draw_self();

if(hoverNode != noone){
    draw_sprite(spr_Selected, -1, gridX * GRID_SIZE, gridY * GRID_SIZE);
    
    tempText = string(gridX) + ", " + string(gridY) + " = ";
    
    if(hoverNode.occupant != noone){
        tempText += hoverNode.occupant.name;
    }
    else tempText += "noone";
    
    draw_set_colour(c_black);
    draw_rectangle(0, 0, string_width(tempText), string_height(tempText), false);
    draw_set_color(c_white);
    draw_text(0, 0, tempText);
    draw_set_colour(c_black);
    
    tempText = hoverNode.type;
    
    if(hoverNode.passable){
        tempText += " passable = true, cost = " + string(hoverNode.cost);
    }
    else{
        tempText += " passable = false";
    }
    
    draw_set_colour(c_black);
    draw_rectangle(0, 20, string_width(tempText), 20 + string_height(tempText), false);
    draw_set_color(c_white);
    draw_text(0, 20, tempText);
    draw_set_colour(c_black);
    
}


if(selectedUnit != noone){
    tempText = selectedUnit.name;
    draw_set_colour(c_black);
    draw_rectangle(0, room_height, string_width(tempText), room_height-string_height(tempText), false);
    draw_set_color(c_white);
    draw_text(0, room_height - string_height(tempText), tempText);
    draw_set_colour(c_black);
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
